---
title: "BC Child Care Vacancies"
date: today
format: 
  dashboard:
    mainfont: Nunito, sans-serif
    orientation: rows
    scrolling: true
    embed-resources: true
    nav-buttons: 
      - icon: github
        href: https://github.com/wvictor14/bcchildcarebot
      - icon: mastodon
        href: https://botsin.space/@bcchildcarebot
      - icon: house-fill
        href: https://victoryuan.com/
editor_options: 
  chunk_output_type: console
---

# Vacancies

```{r}
#| include: FALSE
library(tidyverse)
library(glue)
library(reactable)
library(htmltools)
library(crosstalk)
library(leaflet)
```

```{r}
#| include: FALSE

# read in bc child care data ----
url <- 'https://catalogue.data.gov.bc.ca/dataset/4cc207cc-ff03-44f8-8c5f-415af5224646/resource/9a9f14e1-03ea-4a11-936a-6e77b15eeb39/download/childcare_locations.csv'
bccc <- readr::read_csv(url)
.today <- lubridate::today(tzone = 'Canada/Pacific')
```

Last updated: `{r} .today`

Every day, new vacancies across BC Child Care facilities will be listed here. 

BC Childcare Map Data is used to identify and extract facilities with up-to-date vacancy information[^1]. Up-to-date is defined as being vacancy information updated within last 7 days.

[^1]: I cannot guarantee that the "last updated" information or any other information is accurate. In my experience, some information is not accurate in the BC Child Care Map dataset.



```{css}
#filterdiv {
  display:block;
  font-size: 0.9375rem;
  margin-bottom: 0px !important;
  margin-left: 10px;
  margin-right: 10px;
}
.crosstalk-input {
  margin-bottom: 0px;
}
.title {
  font-size: 1.5rem;
}

.packages-table {
  margin-top: 1rem;
  font-size: 0.9375rem;
  border: 1px solid hsl(213, 33%, 93%);
  border-radius: 4px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1);
}

.header {
  background-color: hsl(213, 45%, 97%);
  border-bottom-color: hsl(213, 33%, 93%);
  border-bottom-width: 1px;
  color: hsl(213, 13%, 33%);
}

.header[aria-sort]:hover, .header[aria-sort]:focus {
  color: hsl(213, 55%, 50%);
}

.units {
  margin-left: 0.15em;
  color: rgba(0, 0, 0, 0.6);
}

.tbl-title {
  font-size: 0.875rem;
}

.tbl-detail {
  padding: 24px;
  box-shadow: inset 0 1px 3px #dbdbdb;
  background: hsl(213, 20%, 99%);
}

.detail-label {
  margin: 1.25rem 0 0.25rem;
  font-size: 0.875rem;
  color: rgba(0, 0, 0, 0.6);
}

.detail-title {
  margin-bottom: 1rem;
  font-size: 1.25rem;
  font-weight: 600;
}

.detail-description {
  font-size: 0.875rem;
}
#VACANCY_LAST_UPDATE #VACANCY_SRVC_UNDER36 #VACANCY_SRVC_30MOS_5YRS 
#VACANCY_SRVC_LICPRE #VACANCY_SRVC_OOS_GR1_AGE12 {
  height:25px !important;
}
```

## Row {height=30%}

```{r setup_tbl_data}
# filter and clean
tbl_data <- bccc |>
  
  # filter to yesterday + 7 days, and group of interest
  filter(
    VACANCY_LAST_UPDATE >= .today -1 -7
  )  |> 
  
  # filter columns
  select(
    SERVICE_TYPE_CD:CITY, 
    PHONE:EMAIL,
    LONGITUDE, LATITUDE,
    #    contains('OP_'),
    #   contains('SRVC_'),
    #  contains('LANG_'),
    contains('VACANCY_') ) |> 
  
  select(NAME, everything()) |>
  
  # crosstalk key
  mutate(id = row_number()) |> 
  
  # clean vacancy column
  # if yes, replace with vacancy type, otherwise leave as NA
  # NA will not show as a choice
  pivot_longer(contains('VACANCY_SRVC_')) |> 
  mutate(value = ifelse(value == 'Y', str_remove_all(name, 'VACANCY_SRVC_'), NA)) |>  
  pivot_wider(names_from = name, values_from = value)

shared_dat <- SharedData$new(tbl_data, key = ~id)

# columns to hide
hide <- tbl_data |> 
  select(
    contains('VACANCY'),
    LONGITUDE, LATITUDE,
    SERVICE_TYPE_CD,
    ADDRESS_1, PHONE,
    id, `ADDRESS_2`, WEBSITE, EMAIL) |> 
  colnames() %>%
  setNames(., .) |> 
  map(
    ~colDef(
      show = FALSE
    )
  )
```

### Column {width=20%}

```{r }
htmltools::div(
  id = "filterdiv",
  filter_select("CITY", "CITY", shared_dat, ~CITY),
  filter_checkbox(
    "VACANCY_SRVC_UNDER36", 
    "", 
    shared_dat, 
    ~VACANCY_SRVC_UNDER36
  ),
  filter_checkbox(
    "VACANCY_SRVC_30MOS_5YRS", 
    "", 
    shared_dat,
    ~VACANCY_SRVC_30MOS_5YRS
  ),
  filter_checkbox(
    "VACANCY_SRVC_LICPRE", 
    "", 
    shared_dat, 
    ~VACANCY_SRVC_LICPRE
  ),
  filter_checkbox(
    "VACANCY_SRVC_OOS_GR1_AGE12",
    "", 
    shared_dat, 
    ~VACANCY_SRVC_OOS_GR1_AGE12
  )
) |> htmltools::browsable()
```

### Column 

```{r}
row_details <- function(index, bccc) {
  bccc <- bccc[index, ] 
  # function that creates class based on colum name
  df_field <- function(name, ...) {
    if (any(is.na(...))) NULL
    else tagList(div(class = "detail-label", name), ...)
  }
  
  detail <- div(
    class = "tbl-detail",
    div(class = "detail-header", 
        span(class = "detail-title", bccc$NAME)),
    div(class = "detail-description", bccc$SERVICE_TYPE_CD),
    df_field("Phone", bccc$PHONE),
    df_field("Website", bccc$WEBSITE),
    df_field("Email", bccc$EMAIL),
    df_field("Address", bccc$ADDRESS_1),
    df_field('Address 2', bccc$ADDRESS_2),
    df_field('City', bccc$CITY),
    df_field(
      'Map', 
      bccc |> 
        leaflet() |>
        addProviderTiles(providers$CartoDB.Voyager) |>
        #addProviderTiles(providers$CartoDB.Positron) |>
        addCircleMarkers()
    ),
    
    df_field(
      "Vacancy type",
      reactable(
        bccc |>  
          select(contains('VACANCY_SRVC_')) |> 
          pivot_longer(everything(), names_to = 'Age Group', values_to = 'Vacancy?')
        ,
        pagination = FALSE,
        defaultColDef = colDef(headerClass = "header"),
        class = "vacancy-table",
        theme = reactableTheme(cellPadding = "8px 12px")
      ))
  )
  
  detail
}

#htmltools::browsable(row_details(1, bccc))


reactable(
  shared_dat,
  defaultSorted = "CITY",
  defaultColDef = colDef(
    # show = FALSE,
    headerClass = "header", align = "left"),
  onClick = "expand",
  resizable = TRUE,
  columns = hide,
  details = function(index) row_details(index, tbl_data)
)
```

```{r dev}
#| eval: FALSE
#| include: FALSE
bccc |> 
  slice(120) |> 
  # map
  leaflet() |>
  
    addProviderTiles(providers$CartoDB.Voyager) |>
  #addProviderTiles(providers$CartoDB.Positron) |>
  addCircleMarkers()

```

# Dev

```{r}

ojs_define(tbl_data = tbl_data)
```


```{ojs}
yearlyChart = Plot.plot({
  marks: [
    Plot.line(transpose(tbl_data), 
      {x: "LONGITUDE", y: "LATITUDE"}, 
      { stroke: "black" }
    )
  ]}
)
```
